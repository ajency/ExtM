(function ( root, factory ) {

    var babysitter, backbone, underscore, wreqr;

    if (typeof exports === "object") {

        underscore = require( "underscore" );
        backbone = require( "backbone" );
        wreqr = require( "backbone.wreqr" );
        babysitter = require( "backbone.babysitter" );

        return module.exports = factory( underscore, backbone, wreqr, babysitter );

    } else if (typeof define === "function" && define.amd) {
        return define( ["underscore", "backbone", "marionette"], factory );
    }

})( this, function ( _, Backbone, Marionette ) {

    // Generated by CoffeeScript 1.7.1
    var Extm;
    
    Extm = (function ( global, Backbone, _ , Marionette) {
        "use strict";
        Extm = {};
        Extm.$ = Backbone.$;
    
        // Generated by CoffeeScript 1.7.1
        var __hasProp = {}.hasOwnProperty,
          __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
        
        Extm.Application = (function(_super) {
          __extends(Application, _super);
        
          function Application() {
            return Application.__super__.constructor.apply(this, arguments);
          }
        
          Application.prototype.histroyStarted = false;
        
          Application.prototype.defaultRoute = '';
        
          Application.prototype.start = function(options) {
            if (options == null) {
              options = {};
            }
            if (_.size(this.getRegions()) === 0) {
              throw new Error('application regions not specified');
            }
            Application.__super__.start.call(this, options);
            return this.startHistory();
          };
        
          Application.prototype._setUpRegions = function(regions) {
            return this.addRegions(regions);
          };
        
          Application.prototype.startHistory = function() {
            if (!this.histroyStarted) {
              Backbone.history.start();
              if (this.getCurrentRoute() === '') {
                this.navigate(this.defaultRoute, {
                  trigger: true
                });
              }
              return this.histroyStarted = true;
            }
          };
        
          Application.prototype.navigate = function(route, options) {
            return Backbone.history.navigate(route, options);
          };
        
          Application.prototype.setDefaultRoute = function(route) {
            if (route == null) {
              route = '';
            }
            return this.defaultRoute = route;
          };
        
          Application.prototype.getCurrentRoute = function() {
            var frag;
            frag = Backbone.history.fragment;
            if (_.isEmpty(frag)) {
              return '';
            } else {
              return frag;
            }
          };
        
          return Application;
        
        })(Marionette.Application);
        
        // Generated by CoffeeScript 1.7.1
        Marionette.Renderer.render = function(template, data) {
          if (data == null) {
            data = {};
          }
          if (!template) {
            template = '';
          }
          return Mustache.to_html(template, data);
        };
        
    
        return Extm;
    })( this, Backbone, _, Marionette );
    

    Marionette.Extm = Extm;

    return Extm;
} );
