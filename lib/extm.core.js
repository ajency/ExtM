
var Extm;

Extm = (function ( global, Backbone, _ , Marionette, Mustache) {
    "use strict";
    Extm = {};
    Extm.$ = Backbone.$;

    // Generated by CoffeeScript 1.7.1
    window.msgbus = Backbone.Wreqr.radio.channel("global");
    
    // Generated by CoffeeScript 1.7.1
    var __hasProp = {}.hasOwnProperty,
      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
    
    Extm.Application = (function(_super) {
      __extends(Application, _super);
    
      function Application() {
        return Application.__super__.constructor.apply(this, arguments);
      }
    
      Application.prototype.histroyStarted = false;
    
      Application.prototype.defaultRoute = '';
    
      Application.prototype.start = function(options) {
        if (options == null) {
          options = {};
        }
        if (_.size(this.getRegions()) === 0) {
          throw new Error('application regions not specified');
        }
        Application.__super__.start.call(this, options);
        return this.startHistory();
      };
    
      Application.prototype._setUpRegions = function(regions) {
        return this.addRegions(regions);
      };
    
      Application.prototype.startHistory = function() {
        if (!this.histroyStarted) {
          Backbone.history.start();
          if (this.getCurrentRoute() === '') {
            this.navigate(this.defaultRoute, {
              trigger: true
            });
          }
          return this.histroyStarted = true;
        }
      };
    
      Application.prototype.navigate = function(route, options) {
        return Backbone.history.navigate(route, options);
      };
    
      Application.prototype.setDefaultRoute = function(route) {
        if (route == null) {
          route = '';
        }
        return this.defaultRoute = route;
      };
    
      Application.prototype.getCurrentRoute = function() {
        var frag;
        frag = Backbone.history.fragment;
        if (_.isEmpty(frag)) {
          return '';
        } else {
          return frag;
        }
      };
    
      return Application;
    
    })(Marionette.Application);
    
    // Generated by CoffeeScript 1.7.1
    var __hasProp = {}.hasOwnProperty,
      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
      __slice = [].slice;
    
    Extm.RegionController = (function(_super) {
      __extends(RegionController, _super);
    
      function RegionController(options) {
        if (options == null) {
          options = {};
        }
        this.region = options.region || msgbus.reqres.request("default:region");
        this._instance_id = _.uniqueId("controller");
        msgbus.commands.execute("register:instance", this, this._instance_id);
        RegionController.__super__.constructor.call(this, options);
      }
    
      RegionController.prototype.destroy = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        delete this.region;
        delete this.options;
        msgbus.commands.execute("unregister:instance", this, this._instance_id);
        return RegionController.__super__.destroy.call(this, args);
      };
    
      RegionController.prototype.show = function(view, options) {
        if (options == null) {
          options = {};
        }
        _.defaults(options, {
          loading: false,
          region: this.region
        });
        this._setMainView(view);
        return this._manageView(view, options);
      };
    
      RegionController.prototype._setMainView = function(view) {
        if (this._mainView) {
          return;
        }
        this._mainView = view;
        return this.listenTo(view, "close", this.close);
      };
    
      RegionController.prototype._manageView = function(view, options) {
        if (options.loading) {
          return msgbus.commands.execute("show:loading", view, options);
        } else {
          return options.region.show(view);
        }
      };
    
      return RegionController;
    
    })(Marionette.Controller);
    
    // Generated by CoffeeScript 1.7.1
    Marionette.Renderer.render = function(template, data) {
      if (data == null) {
        data = {};
      }
      if (!template) {
        template = '';
      }
      return Mustache.to_html(template, data);
    };
    

    return Extm;
})( this, Backbone, _, Marionette, Mustache );
