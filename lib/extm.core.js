
var Extm;

Extm = (function ( global, Backbone, _ , Marionette, Mustache) {

    "use strict";

    Extm = {};
    Extm.$ = Backbone.$;

    // Generated by CoffeeScript 1.7.1
    window.msgbus = Backbone.Wreqr.radio.channel("global");
    

    // Generated by CoffeeScript 1.7.1
    _.extend(Backbone.Model.prototype, {
      sync: function(method, model, options) {
        var allData, idAttr, onlyChanged, params, xhr, _action, _ref, _ref1;
        if (!this.name) {
          throw new Error("'name' property not set for the model");
        }
        params = {
          type: "POST",
          dataType: "json",
          data: {}
        };
        params.url = AJAXURL;
        _action = "" + method + "-" + this.name;
        params.data['action'] = _action;
        switch (method) {
          case 'read':
            params.type = 'GET';
            idAttr = model['idAttribute'];
            params.data[idAttr] = model.get(idAttr);
            break;
          case 'create':
            params.data = _.defaults(model.toJSON(), params.data);
            break;
          case 'update':
            onlyChanged = (_ref = options.onlyChanged) != null ? _ref : false;
            idAttr = model['idAttribute'];
            if (onlyChanged) {
              params.data[idAttr] = model.get(idAttr);
              if (model.hasChanged()) {
                params.data.changes = {};
                _.each(model.changed, function(changeAttributeValue, changeAttributeName) {
                  return params.data.changes[changeAttributeName] = changeAttributeValue;
                }, this);
              }
            } else {
              params.data = _.defaults(model.toJSON(), params.data);
            }
            break;
          case 'delete':
            allData = (_ref1 = options.allData) != null ? _ref1 : true;
            if (allData) {
              params.data = _.defaults(model.toJSON(), params.data);
            } else {
              idAttr = model['idAttribute'];
              params.data[idAttr] = model.get(idAttr);
            }
        }
        xhr = options.xhr = Backbone.ajax(_.extend(params, options));
        model.trigger("" + method + ":request", model, xhr, options);
        model["_" + method] = xhr;
        return xhr;
      }
    });
    
    // Generated by CoffeeScript 1.7.1
    _.extend(Backbone.Collection.prototype, {
      triggerMethod: Marionette.triggerMethod,
      getOption: Marionette.proxyGetOption
    });
    

    // Generated by CoffeeScript 1.7.1
    var __hasProp = {}.hasOwnProperty,
      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
    
    Extm.Application = (function(_super) {
      __extends(Application, _super);
    
      function Application() {
        return Application.__super__.constructor.apply(this, arguments);
      }
    
      Application.prototype.histroyStarted = false;
    
      Application.prototype.defaultRoute = '';
    
      Application.prototype.start = function(options) {
        if (options == null) {
          options = {};
        }
        if (_.size(this.getRegions()) === 0) {
          throw new Error('application regions not specified');
        }
        Application.__super__.start.call(this, options);
        return this.startHistory();
      };
    
      Application.prototype._setUpRegions = function(regions) {
        return this.addRegions(regions);
      };
    
      Application.prototype.startHistory = function() {
        if (!this.histroyStarted) {
          Backbone.history.start();
          if (this.getCurrentRoute() === '') {
            this.navigate(this.defaultRoute, {
              trigger: true
            });
          }
          return this.histroyStarted = true;
        }
      };
    
      Application.prototype.navigate = function(route, options) {
        return Backbone.history.navigate(route, options);
      };
    
      Application.prototype.setDefaultRoute = function(route) {
        if (route == null) {
          route = '';
        }
        return this.defaultRoute = route;
      };
    
      Application.prototype.getCurrentRoute = function() {
        var frag;
        frag = Backbone.history.fragment;
        if (_.isEmpty(frag)) {
          return '';
        } else {
          return frag;
        }
      };
    
      return Application;
    
    })(Marionette.Application);
    
    // Generated by CoffeeScript 1.7.1
    var __hasProp = {}.hasOwnProperty,
      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
      __slice = [].slice;
    
    Extm.RegionController = (function(_super) {
      __extends(RegionController, _super);
    
      RegionController.prototype.region = false;
    
      RegionController.prototype.currentView = false;
    
      function RegionController(options) {
        if (options == null) {
          options = {};
        }
        RegionController.__super__.constructor.call(this, options);
        if (!options.region) {
          throw new Error('Region is not specified for the controller');
        }
        this._assignRegion(options.region);
        this.instanceId = _.uniqueId('region-controller-');
        msgbus.commands.execute('register:controller', this.instanceId, this);
      }
    
      RegionController.prototype._assignRegion = function(region) {
        return this.region = region;
      };
    
      RegionController.prototype.destroy = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        delete this.region;
        delete this.currentView;
        delete this.options;
        msgbus.commands.execute("unregister:controller", this.instanceId, this);
        return RegionController.__super__.destroy.call(this, args);
      };
    
      RegionController.prototype.show = function(view) {
        this.currentView = view;
        return this.region.show(view);
      };
    
      return RegionController;
    
    })(Marionette.Controller);
    
    // Generated by CoffeeScript 1.7.1
    Marionette.Renderer.render = function(template, data) {
      if (data == null) {
        data = {};
      }
      if (!template) {
        template = '';
      }
      return Mustache.to_html(template, data);
    };
    

    // Generated by CoffeeScript 1.7.1
    var __hasProp = {}.hasOwnProperty,
      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
    
    Extm.FormView = (function(_super) {
      __extends(FormView, _super);
    
      function FormView() {
        return FormView.__super__.constructor.apply(this, arguments);
      }
    
      FormView.prototype.tagName = 'form';
    
      FormView.prototype.className = 'extm-form-view';
    
      FormView.prototype.onShow = function() {
        return this.$el.validate();
      };
    
      return FormView;
    
    })(Marionette.ItemView);
    
    // Generated by CoffeeScript 1.7.1
    var __hasProp = {}.hasOwnProperty,
      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
    
    Extm.FormLayoutView = (function(_super) {
      __extends(FormLayoutView, _super);
    
      function FormLayoutView() {
        return FormLayoutView.__super__.constructor.apply(this, arguments);
      }
    
      FormLayoutView.prototype.tagName = 'form';
    
      FormLayoutView.prototype.className = 'extm-form-layout-view';
    
      FormLayoutView.prototype.onShow = function() {
        return this.$el.validate();
      };
    
      return FormLayoutView;
    
    })(Marionette.LayoutView);
    

    return Extm;

})( this, Backbone, _, Marionette, Mustache );