// Generated by CoffeeScript 1.7.1
describe('Region Controller', function() {
  var regionController;
  regionController = null;
  it('must be defined', function() {
    expect(Extm.RegionController).toBeDefined();
    return expect(Extm.RegionController).toEqual(jasmine.any(Function));
  });
  describe('on construction', function() {
    describe('when no region param is passed', function() {
      return it('must throw an error', function() {
        return expect(function() {
          return new Extm.RegionController;
        }).toThrow();
      });
    });
    return describe('when region param is passed', function() {
      beforeEach(function() {
        setFixtures('<div id="some-region"></div>');
        spyOn(msgbus.commands, 'execute').and.callThrough();
        return regionController = new Extm.RegionController({
          region: new Marionette.Region({
            el: '#some-region'
          })
        });
      });
      afterEach(function() {
        return regionController.destroy();
      });
      it('must set its own region property', function() {
        return expect(regionController.region instanceof Marionette.Region).toBeTruthy();
      });
      return it('msgbus must execute a command', function() {
        return expect(msgbus.commands.execute).toHaveBeenCalledWith('register:controller', regionController.instanceId, regionController);
      });
    });
  });
  describe('on destroying', function() {
    beforeEach(function() {
      setFixtures('<div id="some-region"></div>');
      spyOn(msgbus.commands, 'execute').and.callThrough();
      regionController = new Extm.RegionController({
        region: new Marionette.Region({
          el: '#some-region'
        }),
        otherRef: 'some value'
      });
      regionController.onDestroy = function() {};
      spyOn(regionController, 'onDestroy').and.callThrough();
      return regionController.destroy();
    });
    afterEach(function() {
      return regionController = null;
    });
    it('must delete reference to region', function() {
      return expect(regionController.region).not.toEqual(jasmine.any(Object));
    });
    it('must delete reference to currentView', function() {
      return expect(regionController.currentView).not.toEqual(jasmine.any(Object));
    });
    it('must delete options reference', function() {
      return expect(regionController.getOption('otherRef')).not.toBe('some value');
    });
    it('msgbus must execute a command', function() {
      return expect(msgbus.commands.execute).toHaveBeenCalledWith('unregister:controller', regionController.instanceId, regionController);
    });
    return it('must still have default destroy behavior', function() {
      return expect(regionController.onDestroy).toHaveBeenCalled();
    });
  });
  return describe('on show', function() {
    var view;
    view = null;
    beforeEach(function() {
      setFixtures('<div id="some-region"></div>');
      regionController = new Extm.RegionController({
        region: new Marionette.Region({
          el: '#some-region'
        }),
        otherRef: 'some value'
      });
      view = new Marionette.ItemView({
        template: 'view'
      });
      view.onShow = function() {};
      spyOn(view, 'onShow');
      return regionController.show(view);
    });
    afterEach(function() {
      return regionController.destroy();
    });
    it('must have view object assign to controller view property', function() {
      return expect(regionController.currentView).toBe(view);
    });
    return it('must show the view', function() {
      return expect(view.onShow).toHaveBeenCalled();
    });
  });
});
