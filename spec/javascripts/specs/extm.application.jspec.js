// Generated by CoffeeScript 1.7.1
define(['marionette', 'src/extm.application'], function(Marionette, ExtmApplication) {
  describe('Extended marionette application', function() {
    return it('must be defined', function() {
      expect(ExtmApplication).toBeDefined();
      return expect(ExtmApplication).toEqual(jasmine.any(Function));
    });
  });
  describe('can have a default route', function() {
    return it('must have default route to be ""', function() {
      var App;
      App = new ExtmApplication;
      expect(App.defaultRoute).toBe('');
      App.setDefaultRoute('some-hash');
      return expect(App.defaultRoute).toBe('some-hash');
    });
  });
  return describe('when app starts', function() {
    afterEach(function() {
      return Backbone.history.stop();
    });
    describe('when app starts without region hash', function() {
      var App;
      App = '';
      beforeEach(function() {
        spyOn(ExtmApplication.prototype, 'start').and.callThrough();
        return App = new ExtmApplication;
      });
      afterEach(function() {
        return App = {};
      });
      return it('must throw an error', function() {
        return expect(function() {
          return App.start();
        }).toThrow();
      });
    });
    describe('when app starts with region hash', function() {
      var App, onStart;
      App = '';
      onStart = null;
      beforeEach(function() {
        App = new ExtmApplication;
        App.onStart = function() {};
        onStart = spyOn(App, 'onStart');
        return App.start({
          regions: {
            regionName: '#region'
          }
        });
      });
      afterEach(function() {
        Backbone.history.stop();
        return App = {};
      });
      it('must set the app region', function() {
        return expect(App.getRegion('regionName') instanceof Marionette.Region).toBeTruthy();
      });
      it('must run onStart function', function() {
        return expect(onStart).toHaveBeenCalled();
      });
      return it('must start the backbone history', function() {
        return expect(App.histroyStarted).toBeTruthy();
      });
    });
    describe('when current route is empty', function() {
      var App;
      App = '';
      beforeEach(function() {
        window.location.hash = '';
        return App = new ExtmApplication;
      });
      afterEach(function() {
        window.location.hash = '';
        return App = {};
      });
      it('must navigate to "" route', function() {
        App.start({
          regions: {
            name: '#hash'
          }
        });
        return expect(App.getCurrentRoute()).toBe('');
      });
      return it('must navigate to default route', function() {
        App.setDefaultRoute('new-route');
        App.start({
          regions: {
            name: '#hash'
          }
        });
        return expect(App.getCurrentRoute()).toBe('new-route');
      });
    });
    return describe('when current route not empty', function() {
      var App;
      App = {};
      beforeEach(function() {
        window.location.hash = '#/some-hash';
        App = new ExtmApplication;
        return App.start({
          regions: {
            name: '#hash'
          }
        });
      });
      afterEach(function() {
        Backbone.history.stop();
        window.location.hash = '';
        return App = {};
      });
      return it('must navigate to default route', function() {
        return expect(App.getCurrentRoute()).toBe('some-hash');
      });
    });
  });
});
