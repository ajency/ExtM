// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['src/extm.namespace', 'marionette', 'backbone', 'underscore'], function(Extm, Marionette, Backbone, _) {
  return Extm.Application = (function(_super) {
    __extends(Application, _super);

    function Application() {
      return Application.__super__.constructor.apply(this, arguments);
    }

    Application.prototype.start = function(options) {
      var regions;
      if (options == null) {
        options = {};
      }
      Application.__super__.start.call(this, options);
      if (!options.regions) {
        throw new Error;
      }
      regions = options.regions, this.rootRoute = options.rootRoute;
      if (_.isUndefined(this.rootRoute)) {
        this.rootRoute = '';
      }
      this._setUpAppRegions(regions);
      this.startHistory();
      if (!this.getCurrentRoute()) {
        return this.navigate(this.rootRoute, {
          trigger: true
        });
      }
    };

    Application.prototype.navigate = function(route, options) {
      if (options == null) {
        options = {};
      }
      return Backbone.history.navigate(route, options);
    };

    Application.prototype.getCurrentRoute = function() {
      var frag;
      frag = Backbone.history.fragment;
      if (_.isEmpty(frag)) {
        return '';
      } else {
        return frag;
      }
    };

    Application.prototype.startHistory = function() {
      if (Backbone.history) {
        return Backbone.history.start();
      }
    };

    Application.prototype._setUpAppRegions = function(regions) {
      return this.addRegions(regions);
    };

    return Application;

  })(Marionette.Application);
});
